version: "3"

services:
  frontend:
    container_name: frontend
    build:
      context: ./Ladder-Frontend
    ports:
      - 8080:8080
    volumes:
      - ./Ladder-Frontend/:/Ladder-Frontend

  backend:
    container_name: backend
    build:
      context: ./Ladder-Backend
    expose:
      - 5123
    ports:
      - 5123:5123
    volumes:
      - backend:/var/lib/backend/data
    environment:
      FLASK_DEBUG: 1 
    depends_on:
      - postgres
    command: gunicorn -w 1 -b 0.0.0.0:5123 app:app --reload
    tty: true

  postgres:
    container_name: ladderdb
    image: postgres:latest
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=${PG_DB}
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
    volumes:
        - postgres:/var/lib/postgres

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    ports:
      - 8088:80
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PG_ADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
      
  rabbit:
    container_name: rabbitmq
    hostname: rabbit
    image: rabbitmq:3-management
    command: rabbitmq-server
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=darling
      - RABBITMQ_DEFAULT_PASS=0829
    ports:
    # 메시지 대기열을 사용하려는 서버의 경우에만 5672필요
      - 5672:5672
    # management
      - 15672:15672
    depends_on:
      - backend
      - ai

  celery:
    container_name: celery
    build:
      context: ./Ladder-Backend
      dockerfile: Dockerfile
    restart: unless-stopped  
    # env_file:
    #   - ./settings/.env
    depends_on:
      - "rabbit"
      - "backend"
      - "ai"
    command: ["celery","-A", "service.image_service", "worker", "--loglevel=info"]  
    volumes:
      - backend:/usr/src/app


  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    networks:
      - promnet

  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - 3001:3001
    # volumes:
    #  - ./grafana/grafana-volume:/var/lib/grafana
    networks:
      - promnet

  redis:
    container_name: redis
    image: redis:latest
    volumes:
      - redis:/val/lib/redis/data
    ports:
      - "6379:6379"

networks:
  promnet:
    driver: bridge    
      
volumes:
    postgres:
    frontend:
    backend: {}
    ai:
    redis:


